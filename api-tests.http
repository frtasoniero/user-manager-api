### User Management API Tests
### Base URL: http://localhost:8080
### Make sure your API is running: make dev or make run

###
### 1. Health Check
###
GET http://localhost:8080/api/v1/health
Accept: application/json

###
### 2. User Registration - Valid User
###
POST http://localhost:8080/api/v1/users/register
Content-Type: application/json

{
  "email": "john.doe@example.com",
  "password": "securePassword123",
  "profile": {
    "first_name": "John",
    "last_name": "Doe",
    "address": {
      "street": "123 Main St",
      "city": "New York",
      "state": "NY",
      "country": "USA",
      "zip_code": "10001"
    },
    "phone": "+1-555-123-4567",
    "birthdate": "1990-05-15",
    "nin": "123-45-6789"
  }
}

###
### 3. User Registration - Minimal Required Fields
###
POST http://localhost:8080/api/v1/users/register
Content-Type: application/json

{
  "email": "jane.smith@example.com",
  "password": "anotherPassword456",
  "profile": {
    "first_name": "Jane",
    "last_name": "Smith"
  }
}

###
### 4. User Registration - Invalid Email Format
###
POST http://localhost:8080/api/v1/users/register
Content-Type: application/json

{
  "email": "invalid-email",
  "password": "password123",
  "profile": {
    "first_name": "Invalid",
    "last_name": "User"
  }
}

###
### 5. User Registration - Missing Required Fields
###
POST http://localhost:8080/api/v1/users/register
Content-Type: application/json

{
  "email": "missing.fields@example.com"
}

###
### 6. User Registration - Short Password
###
POST http://localhost:8080/api/v1/users/register
Content-Type: application/json

{
  "email": "short.password@example.com",
  "password": "123",
  "profile": {
    "first_name": "Short",
    "last_name": "Password"
  }
}

###
### 7. User Registration - Duplicate Email (run after successful registration)
###
POST http://localhost:8080/api/v1/users/register
Content-Type: application/json

{
  "email": "john.doe@example.com",
  "password": "differentPassword789",
  "profile": {
    "first_name": "John",
    "last_name": "Duplicate"
  }
}

###
### 8. User Registration - Complete Profile with Address
###
POST http://localhost:8080/api/v1/users/register
Content-Type: application/json

{
  "email": "complete.user@example.com",
  "password": "completePassword123",
  "profile": {
    "first_name": "Complete",
    "last_name": "User",
    "address": {
      "street": "456 Oak Avenue",
      "city": "Los Angeles",
      "state": "CA",
      "country": "USA",
      "zip_code": "90210"
    },
    "phone": "+1-555-987-6543",
    "birthdate": "1985-12-25",
    "nin": "987-65-4321"
  }
}

###
### 9. User Registration - Brazilian User Example
###
POST http://localhost:8080/api/v1/users/register
Content-Type: application/json

{
  "email": "usuario.brasileiro@exemplo.com",
  "password": "senhaSegura123",
  "profile": {
    "first_name": "Carlos",
    "last_name": "Silva",
    "address": {
      "street": "Rua das Flores, 123",
      "city": "São Paulo",
      "state": "SP",
      "country": "Brasil",
      "zip_code": "01234-567"
    },
    "phone": "+55-11-99999-8888",
    "birthdate": "1988-03-10",
    "nin": "123.456.789-00"
  }
}

###
### 10. User Registration - International User
###
POST http://localhost:8080/api/v1/users/register
Content-Type: application/json

{
  "email": "international.user@global.com",
  "password": "globalPassword456",
  "profile": {
    "first_name": "Marie",
    "last_name": "Dubois",
    "address": {
      "street": "15 Rue de la Paix",
      "city": "Paris",
      "state": "Île-de-France",
      "country": "France",
      "zip_code": "75001"
    },
    "phone": "+33-1-23-45-67-89",
    "birthdate": "1992-07-14",
    "nin": "1920714075123"
  }
}

###
### Additional Routes (if implemented later)
###

###
### User Login (when implemented)
###
# POST http://localhost:8080/api/v1/users/login
# Content-Type: application/json

# {
#   "email": "john.doe@example.com",
#   "password": "securePassword123"
# }

###
### Get All Users (Default pagination)
###
GET http://localhost:8080/api/v1/users
Accept: application/json

###
### Get Users - Page 2, 5 per page
###
GET http://localhost:8080/api/v1/users?page=2&page_size=5
Accept: application/json

###
### Get Users - Only specific fields
###
GET http://localhost:8080/api/v1/users?fields=email,profile.first_name,profile.last_name
Accept: application/json

###
### Get Users - Search by name (case-insensitive)
###
GET http://localhost:8080/api/v1/users?search=john
Accept: application/json

###
### Get Users - Search by email
###
GET http://localhost:8080/api/v1/users?search=example.com
Accept: application/json

###
### Get Users - Sort by email (ascending)
###
GET http://localhost:8080/api/v1/users?sort=email&order=asc
Accept: application/json

###
### Get Users - Sort by creation date (descending)
###
GET http://localhost:8080/api/v1/users?sort=created_at&order=desc
Accept: application/json

###
### Get Users - Sort by first name (ascending)
###
GET http://localhost:8080/api/v1/users?sort=first_name&order=asc
Accept: application/json

###
### Get Users - Combined filters (pagination + search + sort)
###
GET http://localhost:8080/api/v1/users?page=1&page_size=3&search=test&sort=email&order=asc
Accept: application/json

###
### Get Users - Full featured query (pagination + fields + search + sort)
###
GET http://localhost:8080/api/v1/users?page=1&page_size=5&fields=email,profile.first_name,profile.last_name,created_at&search=user&sort=created_at&order=desc
Accept: application/json

###
### Get Users - Large page size (will be capped at 100)
###
GET http://localhost:8080/api/v1/users?page_size=200
Accept: application/json

###
### Get Users - Invalid sort field (should return error)
###
GET http://localhost:8080/api/v1/users?sort=invalid_field
Accept: application/json

###
### Get User by Email (when implemented)
###
# GET http://localhost:8080/api/v1/users/john.doe@example.com
# Accept: application/json

###
### Update User (when implemented)
###
# PUT http://localhost:8080/api/v1/users/USER_ID
# Content-Type: application/json

# {
#   "profile": {
#     "first_name": "John Updated",
#     "last_name": "Doe Updated",
#     "phone": "+1-555-999-8888"
#   }
# }

###
### Delete User (when implemented)
###
# DELETE http://localhost:8080/api/v1/users/USER_ID

###
### Test Data Cleanup (MongoDB commands to run in db shell)
###
# Connect to MongoDB: make db-connect
# Delete test users: db.users.deleteMany({"email": {$regex: "example.com|exemplo.com|global.com"}})
# View all users: db.users.find().pretty()
# Count users: db.users.countDocuments()
